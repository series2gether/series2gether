
    <div class="embed-responsive embed-responsive-16by9" id="video-container">
        
        <video id="myPlayer" src="" crossOrigin="anonymous" onmouseover="showNavBarControls('controls')" onmouseout="hideNavBarControls('controls')" onkeydown="playPauseVideo()"></video>
        
        <div class="video-controls" id="video-controls" onmouseover="showNavBarControls('controls')" onmouseout="hideNavBarControls('controls')">
            <nav class="controls" id="controls">
                <button class="btn button-play">
                    <i class="buttonPlay">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play text-control" viewBox="0 0 16 16">
                        <path d="M10.804 8 5 4.633v6.734L10.804 8zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696l6.363 3.692z"/>
                        </svg>
                    </i>
                    <div class="buttonPause hidden" style="display: none">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause text-control" viewBox="0 0 16 16">
                        <path d="M6 3.5a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5zm4 0a.5.5 0 0 1 .5.5v8a.5.5 0 0 1-1 0V4a.5.5 0 0 1 .5-.5z"/>
                        </svg>
                    </div>
                    
                </button>
                <small class="timestamp text-control">0:00</small>
                
                <input type="range" min="0" max="100" step="0.1" value="0" class="progress">
                <input type="range" min="0" max="100" step="0.1" value="100" class="volume">
                
                <button class="btn button-fullscreen" id="fullscreen-toggle-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-fullscreen text-control" viewBox="0 0 16 16">
                    <path d="M1.5 1a.5.5 0 0 0-.5.5v4a.5.5 0 0 1-1 0v-4A1.5 1.5 0 0 1 1.5 0h4a.5.5 0 0 1 0 1h-4zM10 .5a.5.5 0 0 1 .5-.5h4A1.5 1.5 0 0 1 16 1.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 0-.5-.5h-4a.5.5 0 0 1-.5-.5zM.5 10a.5.5 0 0 1 .5.5v4a.5.5 0 0 0 .5.5h4a.5.5 0 0 1 0 1h-4A1.5 1.5 0 0 1 0 14.5v-4a.5.5 0 0 1 .5-.5zm15 0a.5.5 0 0 1 .5.5v4a1.5 1.5 0 0 1-1.5 1.5h-4a.5.5 0 0 1 0-1h4a.5.5 0 0 0 .5-.5v-4a.5.5 0 0 1 .5-.5z"/>
                    </svg>
                </button>
                
            </nav>
        </div>
    </div>
<style>

    .button-play {
        background: #000;
    }

    #video-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 50px;
    }

    .controls {
        padding: 1rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 1rem;
    }

    .progress {
        flex-grow: 1;
    }

    .text-control {
        color: white;
    }

    #video-controls {
        width: 90%;
        position: absolute;
        bottom: 0;
    }

    #video-container:fullscreen video {
        height: 100vh;
        width: 100vw;
    }
    #video-container:fullscreen .video-controls {
        position: fixed;
        bottom: 0;
    }

</style>
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script type="text/javascript">

    //GRAB DOM elements
    const video = document.querySelector("video");
    console.log('video >> ', video);
    const playButton = document.querySelector(".button-play");
    const progressBar = document.querySelector(".progress");
    const timestamp = document.querySelector(".timestamp");
    const navBarControls = document.getElementById("video-controls");
    const volume = document.querySelector(".volume");
    const videoContainer = document.getElementById("video-container");
    //Listen for elements
    document.addEventListener('DOMContentLoaded', () => {
        console.log('FULLSCREEN >>> ', document.getElementById('fullscreen-toggle-btn'));
        var fullscreenButton = document.getElementById('fullscreen-toggle-btn');
       fullscreenButton.addEventListener('click', toggleFullScreen);
        
       playButton.addEventListener('click', playPauseVideo);
       video.addEventListener('click', playPauseVideo);
        video.addEventListener('timeupdate', updateProgressBar);
       progressBar.addEventListener('change', setVideoProgressBar);
       volume.addEventListener('change', setVolumeBar);
       videoContainer.addEventListener('keydown', dummyFunction);
        
    });

    //test hls player
    //var videoSourceURL = '{{{videoURL}}}';
    const params = new URLSearchParams(window.location.search);
    const videoSrc = params.get('videoSrc');
    


    console.log(videoSrc);
    console.log('m3u8 TRUE');
   
    if(videoSrc.includes('m3u8') || videoSrc.includes('mega99')) {
        video.src = videoSrc;
        console.log('m3u8 TRUE, using HLS injection');
        // Create a new instance of the HLS.js player
        const hls = new Hls();

        // Attach the HLS.js player to the video element
        hls.attachMedia(video);

        console.log('{{{videoURL}}}');
        // Load the HLS manifest file
        hls.loadSource(videoSrc);
    } else {
        video.src = videoSrc;
    }

    function dummyFunction() {
        console.log('hello');
    }


    //Utility Functions
    function playPauseVideo() {
        if(video.paused){
            video.play();
            togglePlayPauseIcon();
        } else {
            video.pause();
            togglePlayPauseIcon();
        }
    }

    function setVolumeBar() {
        console.log('volume ', video.volume);
        console.log('volume.value ', volume.value);
        video.volume = volume.value / 100;
    }

    function showNavBarControls(id) {
        document.getElementById(id).style.visibility = "visible";
    }
    function hideNavBarControls(id) {
        document.getElementById(id).style.visibility = "hidden";
    }

    function togglePlayPauseIcon() {
        if(video.paused){
            document.querySelector('.buttonPause').setAttribute('style', 'display: none');
            document.querySelector('.buttonPlay').setAttribute('style', 'display: block');
        } else {
            document.querySelector('.buttonPlay').setAttribute('style', 'display: none');
            document.querySelector('.buttonPause').setAttribute('style', 'display: block');
        }
        
    }
    const toggleFullScreen = function () {
        console.log('fullscreen clicked');
        const container = document.getElementById('video-container');
        const fullscreenApi = container.requestFullscreen
            || container.webkitRequestFullScreen
            || container.mozRequestFullScreen
            || container.msRequestFullscreen;
        if (!document.fullscreenElement) {
            fullscreenApi.call(container);
        }
        else {
            document.exitFullscreen();
        }
    }

    function setVideoProgressBar() {
        video.currentTime = (progressBar.value * video.duration) / 100;
    }

    function updateProgressBar() {
        progressBar.value = (video.currentTime / video.duration) * 100;
        let minutes = Math.floor(video.currentTime / 60);
        let seconds = Math.floor(video.currentTime % 60);

        if(minutes < 10) {
            minutes = "0" + minutes;
        } 
        if (seconds < 10) {
            seconds = "0" + seconds;
        }
        timestamp.textContent = `${minutes}` + ':' + `${seconds}`;
    }
</script>